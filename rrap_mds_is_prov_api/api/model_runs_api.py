"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from rrap_mds_is_prov_api.api_client import ApiClient, Endpoint as _Endpoint
from rrap_mds_is_prov_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from rrap_mds_is_prov_api.model.http_validation_error import HTTPValidationError
from rrap_mds_is_prov_api.model.model_run_record import ModelRunRecord
from rrap_mds_is_prov_api.model.register_model_run_response import RegisterModelRunResponse


class ModelRunsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.register_model_run_complete_model_run_register_complete_post_endpoint = _Endpoint(
            settings={
                'response_type': (RegisterModelRunResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/model_run/register_complete',
                'operation_id': 'register_model_run_complete_model_run_register_complete_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'model_run_record',
                ],
                'required': [
                    'model_run_record',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'model_run_record':
                        (ModelRunRecord,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'model_run_record': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def register_model_run_complete_model_run_register_complete_post(
        self,
        model_run_record,
        **kwargs
    ):
        """Register Model Run Complete  # noqa: E501

        register_model_run_complete Given the model run record object (schema/model) will: - validate the ids provided in the model      - Validate and retrieve the workflow definition     - Validate the templates for the input and output datasets      - Validate that the provided datasets satisfy all templates     - Validate that datasets provided through data store exist - mint a model run record in the registry  - produce a prov-o document reflecting the input model run record - update the model run record in the registry with the prov serialisation   and other information  - lodge the model run record into the graph database store - update the record to lodged status  - return information including the handle id from the model run record  Arguments ---------- record : ModelRunRecord     The model run record to lodge into the graph store and registry  Returns -------  : RegisterModelRunResponse     The response including the handle id and record information  Raises ------ HTTPException     If something goes wrong when validating the IDs returns a 400 error.  See Also (optional) --------  Examples (optional) --------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.register_model_run_complete_model_run_register_complete_post(model_run_record, async_req=True)
        >>> result = thread.get()

        Args:
            model_run_record (ModelRunRecord):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RegisterModelRunResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['model_run_record'] = \
            model_run_record
        return self.register_model_run_complete_model_run_register_complete_post_endpoint.call_with_http_info(**kwargs)

